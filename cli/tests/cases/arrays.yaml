name: "Arrays"
incompatible_configs: ["sh"]
common_test_files:
  - path: "helpers.sh"
    contents: |
      stable_print_assoc_array() {
          # TODO: enable use of nameref when implemented; for now
          # we assume the name of the array is assoc_array
          # local -n assoc_array=$1
          local key

          for key in $(printf "%s\n" "${!assoc_array[@]}" | sort -n); do
              echo "\"${key}\" => ${assoc_array[${key}]}"
          done
      }
cases:
  - name: "Basic indexed array definition and access"
    stdin: |
      var=(a b c)
      echo "var: $var"
      echo "var: ${var}"
      echo "var[0]: ${var[0]}"
      echo "var[1]: ${var[1]}"
      echo "var[2]: ${var[2]}"
      echo "var[3]: ${var[3]}"
      echo "var[4]: ${var[4]}"
      echo "var[*]: ${var[*]}"
      declare -p var

  - name: "Basic associative array definition and access"
    stdin: |
      declare -A var=([0]=99 [a]=3 [b]=4 [c]=5)
      echo "var: $var"
      echo "var: ${var}"
      echo "var[0]: ${var[0]}"
      echo "var[a]: ${var[a]}"
      echo "var[b]: ${var[b]}"
      echo "var[c]: ${var[c]}"
      echo "var[d]: ${var[d]}"

      key="a"
      echo "var[key]: ${var[${key}]}"

  - name: "Array updating via index"
    stdin: |
      var=(a b c)
      var[1]="d"
      echo "var[*]: ${var[*]}"
      declare -p var

  - name: "Replacing array with string"
    stdin: |
      var=(a b c)
      var="x"
      echo "var[*]: ${var[*]}"
      declare -p var

  - name: "Array replacing"
    stdin: |
      var=(a b c)
      var=(d e f)
      echo "var[*]: ${var[*]}"
      declare -p var

  - name: "Appending array to indexed array"
    stdin: |
      var=(a b c)
      var+=(e f g)
      echo "var[*]: ${var[*]}"
      declare -p var

  - name: "Appending array to declared-but-unset indexed array"
    stdin: |
      declare -a var
      var+=(e f g)
      echo "var[*]: ${var[*]}"
      declare -p var

  - name: "Appending item to indexed array"
    stdin: |
      var=(a b c)
      var+=d
      echo "var[*]: ${var[*]}"
      declare -p var

  - name: "Appending item to element of indexed array"
    stdin: |
      declare -a var=(1 2 3)
      var[1]+=2
      echo "var[*]: ${var[*]}"
      declare -p var

  - name: "Appending item to element of int indexed array"
    stdin: |
      declare -ai var=(1 2 3)
      var[1]+=2
      echo "var[*]: ${var[*]}"
      declare -p var

  - name: "Appending array to associative array"
    stdin: |
      source helpers.sh
      declare -A assoc_array=([a]=1 [b]=2 [c]=3)
      assoc_array+=([d]=4 [e]=5 [f]=6)
      stable_print_assoc_array assoc_array

  - name: "Appending array to declared-but-unset associative array"
    stdin: |
      source helpers.sh
      declare -A assoc_array
      assoc_array+=([d]=4 [e]=5 [f]=6)
      stable_print_assoc_array assoc_array

  - name: "Appending item to associative array"
    stdin: |
      source helpers.sh
      declare -A assoc_array=([a]=1 [b]=2 [c]=3)
      assoc_array+=d
      stable_print_assoc_array assoc_array

  - name: "Appending item to element of associative array"
    stdin: |
      source helpers.sh
      declare -A assoc_array=([a]=1 [b]=2 [c]=3)
      assoc_array[b]+=2
      stable_print_assoc_array assoc_array

  - name: "Appending item to element of int associative array"
    stdin: |
      source helpers.sh
      declare -Ai assoc_array=([a]=1 [b]=2 [c]=3)
      assoc_array[b]+=2
      stable_print_assoc_array assoc_array

  - name: "Appending array to item"
    stdin: |
      var=x
      var+=(a b c)
      echo "var[*]: ${var[*]}"
      declare -p var

  - name: "Fill associative array"
    stdin: |
      declare -Ag myarray

      myfunc() {
          local myarg=$1 element
          shift
          for element in "$@"; do
              echo "Setting: myarray[$element]=$myarg"
              myarray[$element]="${myarg}${element}"
          done
      }

      myfunc 'first' bunzip2 bzcat pbunzip2 pbzcat lbunzip2 lbzcat

  - name: "Declare via array index"
    stdin: |
      declare -A assoc_array["key"]="value"
      declare -p assoc_array

      declare -a indexed_array[5]="value"
      declare -p indexed_array

      declare implicit_array[5]="value"
      declare -p implicit_array

      declare -A no_value_assoc_array["key"]
      declare -p no_value_assoc_array

      declare no_value_indexed_array[33]
      declare -p no_value_indexed_array
