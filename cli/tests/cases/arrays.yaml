name: "Arrays"
cases:
  - name: "Basic array definition and access"
    stdin: |
      var=(a b c)
      echo "var: $var"
      echo "var: ${var}"
      echo "var[0]: ${var[0]}"
      echo "var[1]: ${var[1]}"
      echo "var[2]: ${var[2]}"
      echo "var[3]: ${var[3]}"
      echo "var[4]: ${var[4]}"
      echo "var[*]: ${var[*]}"
      declare -p var

  - name: "Array updating via index"
    stdin: |
      var=(a b c)
      var[1]="d"
      echo "var[*]: ${var[*]}"
      declare -p var

  - name: "Replacing array with string"
    stdin: |
      var=(a b c)
      var="x"
      echo "var[*]: ${var[*]}"
      declare -p var

  - name: "Array replacing"
    stdin: |
      var=(a b c)
      var=(d e f)
      echo "var[*]: ${var[*]}"
      declare -p var

  - name: "Appending array to array"
    stdin: |
      var=(a b c)
      var+=(e f g)
      echo "var[*]: ${var[*]}"
      declare -p var

  - name: "Appending item to array"
    stdin: |
      var=(a b c)
      var+=d
      echo "var[*]: ${var[*]}"
      declare -p var

  - name: "Appending array to item"
    stdin: |
      var=x
      var+=(a b c)
      echo "var[*]: ${var[*]}"
      declare -p var

  - name: "Fill associative array"
    stdin: |
      declare -Ag myarray

      myfunc() {
          local myarg=$1 element
          shift
          for element in "$@"; do
              echo "Setting: myarray[$element]=$myarg"
              myarray[$element]="${myarg}${element}"
          done
      }

      myfunc 'first' bunzip2 bzcat pbunzip2 pbzcat lbunzip2 lbzcat

  - name: "Declare via array index"
    known_failure: true
    stdin: |
      declare -A assoc_array["key"]="value"
      declare -p assoc_array

      declare -a indexed_array[5]="value"
      declare -p indexed_array

      declare implicit_array[5]="value"
      declare -p implicit_array

      declare -A no_value_assoc_array["key"]
      declare -p no_value_assoc_array

      declare no_value_indexed_array[33]
      declare -p no_value_indexed_array
